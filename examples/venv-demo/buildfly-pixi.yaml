# Pixi 后端虚拟环境配置示例
project:
  name: "venv-demo"
  version: "1.0.0"
  description: "Pixi backend virtual environment demo"

# 虚拟环境配置
venv:
  enabled: true
  backend: "pixi"  # 使用 Pixi 后端
  
  # Pixi 特定配置
  pixi:
    version: "0.35.1"  # Pixi 版本
    
    # Pixi 项目配置
    config:
      # 项目基本信息
      name: "venv-demo"
      version: "0.1.0"
      description: "C++ project with Pixi environment"
      authors: ["buildfly"]
      
      # 通道配置
      channels: ["conda-forge"]
      
      # 平台支持
      platforms: ["linux-64", "osx-64", "osx-arm64", "win-64"]
      
      # 依赖配置
      dependencies:
        # Python 环境
        python: "3.11.*"
        
        # C++ 构建工具
        cmake: ">=3.20"
        ninja: "*"
        pkg-config: "*"
        
        # 测试框架
        gtest: ">=1.17.0,<2"
        
        # 其他工具
        git: "*"
        
      # 构建依赖
      build_dependencies:
        # 平台特定的编译器
        - target: "linux-64"
          dependencies:
            gcc_linux-64: ">=11"
            gxx_linux-64: ">=11"
            gfortran_linux-64: ">=11"
            
        - target: "osx-64"
          dependencies:
            clang_osx-64: ">=11"
            clangxx_osx-64: ">=11"
            gfortran_osx-64: ">=11"
            
        - target: "osx-arm64"
          dependencies:
            clang_osx-arm64: ">=11"
            clangxx_osx-arm64: ">=11"
            gfortran_osx-arm64: ">=11"
            
        - target: "win-64"
          dependencies:
            vs2019_win-64: "*"
      
      # 任务配置
      tasks:
        # CMake 配置
        configure: "cmake -B build ."
        
        # 构建
        build: "cmake --build build"
        
        # 安装
        install: "cmake --install build"
        
        # 测试
        test: "cd build && ctest"
        
        # 清理
        clean: "rm -rf build"
        
        # 开发环境设置
        dev: 
          depends_on: ["configure", "build"]
          
        # Python 相关
        python-shell: "python"
        
      # 环境激活脚本
      activation:
        scripts: ["setup_env.sh"]
  
  # C++ 工具配置
  cpp_tools:
    cmake:
      version: "3.28.0"
      enabled: true
      
    ninja:
      version: "1.11.1"
      enabled: true
      
    gcc:
      version: "11.4"
      enabled: true
      
    clang:
      version: "15.0"
      enabled: true
  
  # Python 环境
  python:
    version: "3.11"
    packages:
      - "cmake"
      - "ninja"
      - "pytest"
      - "numpy"

# 依赖配置
dependencies:
  fmt:
    version: "8.0.1"
    source:
      type: "git"
      urls:
        - "https://github.com/fmtlib/fmt.git"
      tag: "8.0.1"
    build_system: "cmake"
    cmake_options:
      - "FMT_TEST=OFF"
      - "FMT_DOC=OFF"
      - "CMAKE_POSITION_INDEPENDENT_CODE=ON"

# 构建配置
build:
  type: "release"
  parallel: true
  jobs: 4
  
# 缓存配置
cache:
  enabled: true
  directory: ".buildfly/cache"
  max_size: "1GB"
  
# 全局配置
global:
  cache_dir: "~/.buildfly/cache"
  log_level: "info"
